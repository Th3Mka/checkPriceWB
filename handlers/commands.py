import requests
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from database.database import SessionLocal, User
from handlers.user_handler import UserInfoStates
from keyboard.main_menu import create_price_monitoring_keyboard

router = Router()

@router.message(lambda message: message.text == '/start')
async def cmd_start(message: types.Message, state: FSMContext):
    db = SessionLocal()
    existing_user = db.query(User).filter(User.user_id == message.from_user.id).first()

    if existing_user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {}! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.".format(existing_user.name),
                             reply_markup=create_price_monitoring_keyboard())
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
        await state.set_state(UserInfoStates.waiting_for_name)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏

    db.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö


@router.message(lambda message: message.text == '/help')
async def cmd_help(message: types.Message):
    help_text = (
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã. "
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∂–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤."
    )
    await message.answer(help_text, reply_markup=create_price_monitoring_keyboard())


@router.message(lambda message: message.text == '/check_price')
async def cmd_check_price(message: types.Message):
    # –ó–¥–µ—Å—å –≤–∞—à –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –∫–æ–¥, —á—Ç–æ –∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–ª–±—ç–∫–∞)
    params = {
        'ab_testing': 'false',
        'appType': '1',
        'curr': 'rub',
        'dest': '-5518666',
        'hide_dtype': '10',
        'lang': 'ru',
        'query': '–º–∏–∫—Ä–æ—Ñ–∏–±—Ä–∞ –¥–ª—è –∞–≤—Ç–æ',  # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞
        'resultset': 'catalog',
        'sort': 'popular',
        'spp': '30',
    }
    response = requests.get('https://search.wb.ru/exactmatch/ru/common/v9/search', params=params)
    if response.status_code == 200:
        data = response.json()
        products = data.get('data', {}).get('products', [])
        if products:
            first_product = products[0]
            product_info = {
                "id": first_product.get("id"),
                "name": first_product.get("name"),
                "brand": first_product.get("brand"),
                "price": first_product['sizes'][0]['price']['total'] / 100,
                "link": f"https://www.wildberries.ru/catalog/{first_product['id']}/detail.aspx"
            }
            response_message = (
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:\n"
                f"ID: {product_info['id']}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product_info['name']}\n"
                f"–ë—Ä–µ–Ω–¥: {product_info['brand']}\n"
                f"–¶–µ–Ω–∞: {product_info['price']} —Ä—É–±.\n"
                f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {product_info['link']}"
            )
            await message.answer(response_message, reply_markup=create_price_monitoring_keyboard())
        else:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–∏—Å–∫–∞.",
                                 reply_markup=create_price_monitoring_keyboard())
    else:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}",
                             reply_markup=create_price_monitoring_keyboard())


@router.message(lambda message: message.text == '/feedback')
async def cmd_feedback(message: types.Message, state: FSMContext):
    feedback_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:"
    await message.answer(feedback_text, reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(UserInfoStates.waiting_for_feedback)


@router.message(lambda message: message.text == '/settings')
async def cmd_settings(message: types.Message):
    settings_text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–∑–∂–µ."
    await message.answer(settings_text, reply_markup=create_price_monitoring_keyboard())


@router.message(UserInfoStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(name=name)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    await message.answer("–°–ø–∞—Å–∏–±–æ, {}! –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?".format(name))
    await state.set_state(UserInfoStates.waiting_for_age)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞


@router.message(UserInfoStates.waiting_for_age)
async def process_age(message: types.Message, state: FSMContext):
    age_input = message.text  # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    name = data.get('name')  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è

    try:
        age = int(age_input)  # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –≤ int
        db = SessionLocal()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º user_id
        existing_user = db.query(User).filter(User.user_id == message.from_user.id).first()
        if existing_user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", reply_markup=create_price_monitoring_keyboard())
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            new_user = User(user_id=message.from_user.id, name=name, age=age)
            db.add(new_user)
            db.commit()
            await message.answer("–í–∞—à–µ –∏–º—è: {}, –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {} –ª–µ—Ç.".format(name, age),
                                 reply_markup=create_price_monitoring_keyboard())

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ).")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        db.close()

    await state.clear()